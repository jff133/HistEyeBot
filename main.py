import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.errors import ConnectionFailure, OperationFailure
import asyncio

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TOKEN = '7459480012:AAG8DS4Vet7X0uDRjzeJqJoJhUY8JWpclLo'
MONGO_URI = 'mongodb://localhost:27017/'  # <--- –û–ë–ù–û–í–õ–ï–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ú–Ø –•–û–°–¢–ê
DATABASE_NAME = 'history_quiz_db'
QUESTIONS_COLLECTION_NAME = 'questions'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø MONGODB ---
mongo_client = None
db = None
questions_collection = None

# --- –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
user_state = {}


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (–ê–°–ò–ù–•–†–û–ù–ù–´–ï) ---

async def connect_to_mongodb():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB."""
    global mongo_client, db, questions_collection
    try:
        mongo_client = AsyncIOMotorClient(MONGO_URI)
        await mongo_client.admin.command('ping')
        db = mongo_client[DATABASE_NAME]
        questions_collection = db[QUESTIONS_COLLECTION_NAME]
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_NAME}, –∫–æ–ª–ª–µ–∫—Ü–∏—è: {QUESTIONS_COLLECTION_NAME}, —Ö–æ—Å—Ç: {MONGO_URI}.")
        return True
    except ConnectionFailure as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False
    except OperationFailure as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MongoDB (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MongoDB (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}")
        return False


async def load_questions_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'questions' –≤ MongoDB (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    if questions_collection is None:
        logger.error("–ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return []
    try:
        questions = await questions_collection.find().to_list(length=None)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(questions)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{QUESTIONS_COLLECTION_NAME}'.")
        loaded_questions = []
        for q in questions:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ MongoDB: {q}")

            question_text = q.get("question")
            options = q.get("options")
            correct_answer = q.get("correct_answer")
            correct_index = q.get("correct_index")

            is_valid = True
            reasons = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ question_text
            if not isinstance(question_text, str) or not question_text.strip():
                is_valid = False
                reasons.append(f"'question' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–µ: {question_text} (—Ç–∏–ø: {type(question_text)})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ options
            if not isinstance(options, list):
                is_valid = False
                reasons.append(f"'options' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {options} (—Ç–∏–ø: {type(options)})")
            elif not options:
                is_valid = False
                reasons.append("'options' —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
            else:
                if not all(isinstance(opt, str) for opt in options):
                    is_valid = False
                    reasons.append("–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ 'options' –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ correct_answer
            if not isinstance(correct_answer, str) or not correct_answer.strip():
                is_valid = False
                reasons.append(f"'correct_answer' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–µ: {correct_answer} (—Ç–∏–ø: {type(correct_answer)})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ correct_index
            if not isinstance(correct_index, int):
                if isinstance(correct_index, float) and correct_index.is_integer():
                    correct_index = int(correct_index)
                else:
                    is_valid = False
                    reasons.append(f"'correct_index' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º: {correct_index} (—Ç–∏–ø: {type(correct_index)})")

            if is_valid:
                if '_id' in q:
                    del q['_id']
                loaded_questions.append(q)
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å (ID: {q.get('_id', 'N/A')}): {' | '.join(reasons)}. –î–æ–∫—É–º–µ–Ω—Ç: {q}")

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_questions)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return loaded_questions
    except OperationFailure as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ MongoDB –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {e}")
        return []


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–ê–°–ò–ù–•–†–û–ù–ù–´–ï) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n'
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üß†\n'
        '–ù–∞–∂–º–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.'
    )


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    questions = await load_questions_from_db()
    context.bot_data['quiz_questions'] = questions

    if not questions:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return

    user_state[user_id] = {"score": 0, "current_question": 0}
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
    await send_question(update, context)


async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≤–∏–¥–µ inline-–∫–Ω–æ–ø–æ–∫.
    –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π), –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_id = update.effective_user.id
    questions = context.bot_data.get('quiz_questions')

    if user_id not in user_state or user_state[user_id]["current_question"] >= len(questions):
        final_score = user_state.get(user_id, {}).get('score', 0)
        total_questions = len(questions)
        await context.bot.send_message( # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            chat_id=update.effective_chat.id,
            text=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n"
                 f"–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {final_score} –∏–∑ {total_questions}."
        )
        if user_id in user_state:
            del user_state[user_id]
        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—á–µ—Ç: {final_score}")
        return

    current_question_index = user_state[user_id]["current_question"]
    question_data = questions[current_question_index]
    question_text = question_data.get("question", "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞.")
    options = question_data.get("options", [])

    if not options:
        logger.error(f"–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question_text}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å.")
        await context.bot.send_message( # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É."
        )
        user_state[user_id]["current_question"] += 1
        await send_question(update, context)
        return

    keyboard = []
    for i, option in enumerate(options):
        keyboard.append([InlineKeyboardButton(option, callback_data=str(i))])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=update.effective_chat.id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_chat.id –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        text=question_text,
        reply_markup=reply_markup
    )
    logger.info(f"–í–æ–ø—Ä–æ—Å {current_question_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")



async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()  # –û—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    if user_id not in user_state:
        await query.edit_message_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        return

    current_question_index = user_state[user_id]["current_question"]
    questions = context.bot_data.get('quiz_questions')

    if current_question_index >= len(questions):
        await query.edit_message_text(
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: {user_state[user_id]['score']} –∏–∑ {len(questions)}."
        )
        return

    question_data = questions[current_question_index]
    correct_answer_index = question_data.get("correct_index")
    correct_answer_text = question_data.get("correct_answer")
    selected_answer_index = int(query.data)

    response_text = ""
    if selected_answer_index == correct_answer_index:
        user_state[user_id]["score"] += 1
        response_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_state[user_id]['score']} –∏–∑ {len(questions)}."
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question_index + 1}.")
    else:
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer_text}*. –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_state[user_id]['score']} –∏–∑ {len(questions)}."
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question_index + 1}.")

    try:
        # 1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –¥–æ–±–∞–≤–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–±—Ä–∞–≤ –∫–Ω–æ–ø–∫–∏
        keyboard = []
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"{query.message.text}\n\n{response_text}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: {e}.")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=response_text,
            parse_mode='Markdown'
        )

    user_state[user_id]["current_question"] += 1
    # 2. –û—Ç–ø—Ä–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await send_question(update, context)


async def post_init_setup(application: Application) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    if not await connect_to_mongodb():
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return

    application.bot_data['quiz_questions'] = await load_questions_from_db()
    if not application.bot_data['quiz_questions']:
        logger.warning("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TOKEN).post_init(post_init_setup).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(check_answer))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
